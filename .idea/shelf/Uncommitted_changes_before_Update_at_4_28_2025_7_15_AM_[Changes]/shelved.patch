Index: BE/src/main/java/com/backend/ecommerce/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/main/java/com/backend/ecommerce/service/OrderService.java b/BE/src/main/java/com/backend/ecommerce/service/OrderService.java
new file mode 100644
--- /dev/null	(date 1745205171302)
+++ b/BE/src/main/java/com/backend/ecommerce/service/OrderService.java	(date 1745205171302)
@@ -0,0 +1,167 @@
+package com.backend.ecommerce.service;
+
+import com.backend.ecommerce.model.*;
+import com.backend.ecommerce.repository.*;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import javax.mail.MessagingException;
+import javax.persistence.EntityNotFoundException;
+import javax.transaction.Transactional;
+import java.time.LocalDate;
+import java.time.temporal.TemporalAdjusters;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+import static org.springframework.data.jpa.domain.AbstractPersistable_.id;
+
+@Service
+public class OrderService {
+
+    @Autowired
+    private OrderRepository orderRepository;
+    @Autowired
+    private OrderItemRepository orderItemRepository;
+    @Autowired
+    private EmailService emailService;
+    @Autowired
+    private CartRepository cartRepository;
+    @Autowired
+    private UserRepository userRepository;
+    @Autowired
+    private AddressRepository addressRepository;
+    @Autowired
+    private ProductRepository productRepository;
+
+    @Transactional
+    public Order placeOrder(Long cartId, Address address, String paymentMethod) {
+        // Find the cart with the given ID
+        Optional<Cart> optionalCart = cartRepository.findById(cartId);
+        if (!optionalCart.isPresent()) {
+            throw new RuntimeException("Cart Not Found");
+        }
+
+        // Retrieve the cart and its items
+        Cart cart = optionalCart.get();
+        List<CartItem> cartItems = cart.getItems();
+
+        // Validate product quantities
+        for (CartItem cartItem : cartItems) {
+            Product product = cartItem.getProduct();
+            if (product.getQuantity() < cartItem.getQuantity()) {
+                throw new IllegalArgumentException(
+                        "Product " + product.getName() + " does not have enough stock. Available: "
+                                + product.getQuantity() + ", Required: " + cartItem.getQuantity()
+                );
+            }
+        }
+
+        // Save the user's address
+        Address savedAddress = addressRepository.save(address);
+
+        // Create a new order and set its properties
+        Order order = new Order();
+        order.setUser(cart.getUser());
+        order.setOrderDate(LocalDate.now());
+        order.setPayment(paymentMethod);
+        order.setAddress(savedAddress);
+        orderRepository.save(order);
+
+        // Create a list to hold the order items
+        List<OrderItem> orderItems = new ArrayList<>();
+        for (CartItem cartItem : cartItems) {
+            Product product = cartItem.getProduct();
+
+            // Deduct stock for the product
+            product.setQuantity(product.getQuantity() - cartItem.getQuantity());
+            product.setB_quantity(product.getB_quantity() + cartItem.getQuantity());
+            productRepository.save(product);
+
+            // Create and save the order item
+            OrderItem orderItem = new OrderItem();
+            orderItem.setProduct(product);
+            orderItem.setQuantity(cartItem.getQuantity());
+            orderItem.setOrder(order);
+            orderItem.setOrderedProductPrice(orderItem.getProduct());
+            orderItemRepository.save(orderItem);
+            orderItems.add(orderItem);
+        }
+
+        // Set the order's order items and total amount
+        order.setOrderItems(orderItems);
+        order.setTotalAmount(order.calculateTotalAmount());
+        orderRepository.save(order);
+
+        // Clear cart items and save the cart
+        cart.clearItems();
+        cartRepository.save(cart);
+
+        return order;
+    }
+
+
+
+    public List<Order> getAllOrders() {
+        return orderRepository.findAll();
+    }
+
+    public Order updateOrderStatus(Long orderId, OrderStatus newStatus) {
+        Order order = orderRepository.findById(orderId)
+                .orElseThrow(() -> new IllegalArgumentException("Order not found"));
+        order.setStatus(newStatus);
+        return orderRepository.save(order);
+    }
+
+    public void deleteOrderById(Long id) {
+        Order order = orderRepository.findById(id)
+                .orElseThrow(() -> new EntityNotFoundException("Order not found with ID: " + id));
+
+        orderItemRepository.deleteAll(order.getOrderItems());
+        orderRepository.delete(order);
+    }
+
+    public long checkout(Integer userId, Long cartId, Address address, String paymentMethod) throws MessagingException {
+        Order order = this.placeOrder(cartId, address,paymentMethod);
+
+        Optional<User> savedUser = userRepository.findById(userId);
+
+        if (savedUser.isPresent()) {
+            emailService.sendConfirmationEmail(order.getId(), savedUser.get().getEmail());
+            return order.getId();
+        } else {
+            throw new IllegalArgumentException("Invalid user id: " + userId);
+        }
+    }
+
+
+    public List<Order> getOrdersByUserId(Integer userId) {
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new RuntimeException("User not found with id: " + userId));
+        List<Order> orders = orderRepository.findByUser(user);
+        return orders;
+    }
+
+    public List<Order> getOrdersInCurrentMonth() {
+        LocalDate start = LocalDate.now().with(TemporalAdjusters.firstDayOfMonth());
+        LocalDate end = LocalDate.now().with(TemporalAdjusters.lastDayOfMonth());
+        return orderRepository.findByOrderDateBetween(start, end);
+    }
+
+    public List<Order> getOrdersInCurrentWeek() {
+        LocalDate now = LocalDate.now();
+        LocalDate start = now.with(java.time.DayOfWeek.MONDAY);
+        LocalDate end = now.with(java.time.DayOfWeek.SUNDAY);
+        return orderRepository.findByOrderDateBetween(start, end);
+    }
+
+    public List<Order> getOrdersInLastYear() {
+        LocalDate end = LocalDate.now();
+        LocalDate start = end.minusYears(1).plusDays(1); // last year from today's date
+        return orderRepository.findByOrderDateBetween(start, end);
+    }
+
+}
+
+
+
Index: BE/src/main/java/com/backend/ecommerce/service/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/main/java/com/backend/ecommerce/service/EmailService.java b/BE/src/main/java/com/backend/ecommerce/service/EmailService.java
new file mode 100644
--- /dev/null	(date 1741050663495)
+++ b/BE/src/main/java/com/backend/ecommerce/service/EmailService.java	(date 1741050663495)
@@ -0,0 +1,161 @@
+package com.backend.ecommerce.service;
+
+import com.backend.ecommerce.model.Order;
+import com.backend.ecommerce.model.OrderItem;
+import com.backend.ecommerce.model.User;
+import com.backend.ecommerce.repository.OrderRepository;
+import com.backend.ecommerce.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mail.SimpleMailMessage;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
+import org.springframework.stereotype.Service;
+
+import javax.mail.MessagingException;
+import javax.mail.internet.MimeMessage;
+import javax.persistence.EntityNotFoundException;
+import java.util.Optional;
+import java.util.Random;
+
+@Service
+public class EmailService {
+
+
+    @Autowired
+    private UserRepository userRepo;
+
+    @Autowired
+    private JavaMailSender javaMailSender;
+    @Autowired
+    private OrderRepository orderRepository;
+    @Value("${app.url}")
+    private String appUrl;
+
+    public void sendVerificationEmail(String email, String verificationToken) throws MessagingException {
+        String subject = "User Confirmation";
+        String verificationLink = appUrl + "/auth/verify?token=" + verificationToken;
+        String body = "Please click on this link to verify your email address: " + verificationLink;
+
+        MimeMessage message = javaMailSender.createMimeMessage();
+        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
+        helper.setTo(email);
+        helper.setSubject(subject);
+        helper.setText("<html>\n" +
+                "<head>\n" +
+                "	<title> Welcome </title>\n" +
+                "</head>\n" +
+                "<body style=\"font-family: Arial, sans-serif;\">\n" +
+                "	<table style=\"border: 1px solid #ccc; padding: 10px;\">\n" +
+                "		<tr>\n" +
+                "			<td>\n" +
+                "				<h1 style=\"color: #333;\">Thank you for registering with our service!</h1>\n" + "<p><img src=\"https://cdn.templates.unlayer.com/assets/1636450033923-19197947.png\" alt=\"product image\" width=\"400\" height=\"400\"></p>" +
+                "<h3 style=\"color: #333;\">We're excited to have you get started! First, you need to confirm your account. Just click the button below.</h3>\n" +
+                "				<div style=\"background-color: #0096FF; padding: 10px; display: inline-block; margin: 10px 0;\">\n" +
+                "					<a href=\"" + verificationLink + "\" style=\"color: white; text-decoration: none;\">Click here to confirm your email address</a>\n" +
+                "				</div>\n" +
+                "<h3 style=\"color: #333;\">If you have any questions, please feel free to let us know - we're always ready to help out.</h3>\n" +
+                "\n" +
+                "<h3 style=\"color: #333;\">Cheers,</h3>\n" +
+                "<h3 style=\"color: #333;\">Hihihihi</h3>\n" +
+                "			</td>\n" +
+                "		</tr>\n" +
+                "	</table>\n" +
+                "</body>\n" +
+                "</html>", true);
+
+        javaMailSender.send(message);
+    }
+
+    public MimeMessage createConfirmationMessage(Long order_id, String email) throws MessagingException {
+        Optional<Order> existingOrder = orderRepository.findById(order_id);
+        if (!existingOrder.isPresent()) {
+            throw new EntityNotFoundException("Order not found with ID: " + order_id);
+        }
+        String customerName = existingOrder.get().getUser().getFirstname() + ' '+ existingOrder.get().getUser().getLastname();
+        String phoneNumber = existingOrder.get().getUser().getPhoneNumber() == null ? "" : " have phone number: " + existingOrder.get().getUser().getPhoneNumber();
+        String contactEmail = "support@hihi.com";
+        String companyName = "Hihihi";
+        String orderDetails = getOrderDetails(order_id);
+
+        String htmlMessage = "<html><body>"
+                + "<div style=\"font-family: Arial, sans-serif; font-size: 14px;\">"
+                + "<p>Dear " + customerName + phoneNumber + " ,</p>"
+                + "<p>Thank you for placing your order with us. We appreciate your business.</p>"
+                + "<p>We are pleased to inform you that your order has been received and is being processed. Please see the details below:</p>"
+                + "<table style=\"border-collapse: collapse; width: 100%;\">"
+                + "<thead>"
+                + "<tr style=\"background-color: #ccc;\">"
+                + "<th style=\"padding: 10px; text-align: left;\">Product Name</th>"
+                + "<th style=\"padding: 10px; text-align: left;\">Price per Unit</th>"
+                + "<th style=\"padding: 10px; text-align: left;\">Quantity</th>"
+                + "<th style=\"padding: 10px; text-align: left;\">Total Price</th>"
+                + "</tr>"
+                + "</thead>"
+                + "<tbody>"
+                + orderDetails
+                + "</tbody>"
+                + "</table>"
+                + "<p>If you have any questions or concerns, please don't hesitate to contact us at <a href=\"mailto:" + contactEmail + "\">" + contactEmail + "</a>.</p>"
+                + "<p>Thank you again for your order, and we look forward to serving you in the future.</p>"
+                + "<p>Best regards,</p>"
+                + "<p>" + companyName + "</p>"
+                + "</div>"
+                + "</body></html>";
+
+        MimeMessage message = javaMailSender.createMimeMessage();
+        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
+        helper.setTo(email);
+        helper.setSubject("Confirmation Email");
+        helper.setText(htmlMessage, true);
+        return message;
+    }
+
+
+    public void sendConfirmationEmail(Long orderId, String email) throws MessagingException {
+        // Create the email message
+        MimeMessage message = createConfirmationMessage(orderId, email);
+
+        // Send the email
+        javaMailSender.send(message);
+    }
+
+
+
+    private String getOrderDetails(Long order_id) {
+        Optional<Order> optionalOrder = orderRepository.findById(order_id);
+        Order order = optionalOrder.orElseThrow(() -> new EntityNotFoundException("Order not found with ID: " + order_id));
+
+        StringBuilder sb = new StringBuilder();
+        double totalPrice = 0.0;
+        for (OrderItem item : order.getOrderItems()) {
+            double itemPrice = item.getProduct().getPrice() * item.getQuantity();
+            sb.append("<tr>")
+                    .append("<td>").append(item.getProduct().getName()).append("</td>")
+                    .append("<td>").append("VND : ").append(item.getProduct().getPrice()).append("</td>")
+                    .append("<td>").append(item.getQuantity()).append("</td>")
+                    .append("<td>").append("VND :").append(itemPrice).append("</td>")
+                    .append("</tr>");
+            totalPrice += itemPrice;
+        }
+
+        // Append total price to the end of the table
+        sb.append("<tr>")
+                .append("<td colspan=\"3\"><b>Total Price</b></td>")
+                .append("<td><b>VND :").append(totalPrice).append("</b></td>")
+                .append("</tr><br><br><br><br>");
+
+        // Append address information
+        sb.append("<tr>")
+                .append("<td colspan=\"4\"><b>Shipping Address</b></td>")
+                .append("</tr>")
+                .append("<tr>")
+                .append("<td>").append("Door Number: ").append(order.getAddress().getDoorNumber()).append("</td>")
+                .append("<td>").append("Street: ").append(order.getAddress().getStreet()).append("</td>")
+                .append("<td>").append("City: ").append(order.getAddress().getCity()).append("</td>")
+                .append("<td>").append("District: ").append(order.getAddress().getDistrict()).append("</td>")
+                .append("</tr>");
+
+        return sb.toString();
+    }
+}
Index: BE/src/main/java/com/backend/ecommerce/service/DefaultCartJobService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/main/java/com/backend/ecommerce/service/DefaultCartJobService.java b/BE/src/main/java/com/backend/ecommerce/service/DefaultCartJobService.java
new file mode 100644
--- /dev/null	(date 1741050663495)
+++ b/BE/src/main/java/com/backend/ecommerce/service/DefaultCartJobService.java	(date 1741050663495)
@@ -0,0 +1,31 @@
+package com.backend.ecommerce.service;
+
+import com.backend.ecommerce.model.Cart;
+import com.backend.ecommerce.model.User;
+import com.backend.ecommerce.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import java.util.List;
+
+@Service
+public class DefaultCartJobService {
+
+    @Autowired
+    private UserRepository userRepository;
+
+    @Autowired
+    private CartService cartService;
+
+    public void updateDefaultCarts() {
+        // Lấy danh sách người dùng có cart_id_default = -1
+        List<User> users = userRepository.findByCartIdDefault(-1L);
+
+        for (User user : users) {
+            Cart defaultCart = cartService.createCart(user.getId());
+            user.setCartIdDefault(defaultCart.getId());
+
+            userRepository.save(user);
+            System.out.println("Created default cart for user ID: " + user.getId() + ", Cart ID: " + defaultCart.getId());
+        }
+    }
+}
Index: BE/src/main/java/com/backend/ecommerce/service/CategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/main/java/com/backend/ecommerce/service/CategoryService.java b/BE/src/main/java/com/backend/ecommerce/service/CategoryService.java
new file mode 100644
--- /dev/null	(date 1741050663495)
+++ b/BE/src/main/java/com/backend/ecommerce/service/CategoryService.java	(date 1741050663495)
@@ -0,0 +1,40 @@
+package com.backend.ecommerce.service;
+
+import com.backend.ecommerce.model.Category;
+import com.backend.ecommerce.repository.CategoryRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class CategoryService {
+    @Autowired
+    private CategoryRepository categoryRepository;
+    public List<Category> getAllProductsCategories() {
+
+        return categoryRepository.findAll();
+    }
+
+    public Category addCategory(Category category) {
+        return categoryRepository.save(category);
+
+    }
+    public Category updateCategory(Long id, Category category) {
+        Optional<Category> optionalCategory = categoryRepository.findById(id);
+        if (optionalCategory.isPresent()) {
+            Category existingCategory = optionalCategory.get();
+            existingCategory.setName(category.getName());
+            return categoryRepository.save(existingCategory);
+        } else {
+            throw new RuntimeException("No Such Category Found");
+        }
+    }
+
+    public void deleteCategoryById(Long categoryId) {
+
+            categoryRepository.deleteById(categoryId);
+
+    }
+}
Index: BE/src/main/java/com/backend/ecommerce/service/CartService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BE/src/main/java/com/backend/ecommerce/service/CartService.java b/BE/src/main/java/com/backend/ecommerce/service/CartService.java
new file mode 100644
--- /dev/null	(date 1745165557892)
+++ b/BE/src/main/java/com/backend/ecommerce/service/CartService.java	(date 1745165557892)
@@ -0,0 +1,156 @@
+package com.backend.ecommerce.service;
+
+import com.backend.ecommerce.model.Cart;
+import com.backend.ecommerce.model.CartItem;
+import com.backend.ecommerce.model.Product;
+import com.backend.ecommerce.model.User;
+import com.backend.ecommerce.repository.CartItemRepository;
+import com.backend.ecommerce.repository.CartRepository;
+import com.backend.ecommerce.repository.ProductRepository;
+import com.backend.ecommerce.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import javax.persistence.EntityManager;
+import javax.transaction.Transactional;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class CartService {
+    @Autowired
+    private final CartRepository cartRepository; //preventing reassignment
+    @Autowired
+    private final UserRepository userRepository;
+    @Autowired
+    private ProductRepository productRepository;
+    @Autowired
+    private CartItemRepository cartItemRepository;
+
+    public CartService(CartRepository cartRepository, UserRepository userRepository) {
+        this.cartRepository = cartRepository;
+        this.userRepository = userRepository;
+    }
+
+    public Cart createCart(Integer userId) {
+        Optional<User> existingUser = userRepository.findById(userId); //
+        Cart cart = new Cart();
+        cart.setUser(existingUser.orElseThrow(() -> new RuntimeException("User not found")));
+        return cartRepository.save(cart);
+    }
+
+    public Cart getCartById(Long cartId) {
+        return cartRepository.findById(cartId).orElseThrow(() -> new RuntimeException("Cart not found"));
+    }
+
+    public List<CartItem> getCartItems(Cart cart) {
+        return cart.getItems();
+    }
+
+    public String addCartItem(long cartId, Long productId, int quantity) {
+        Optional<Cart> optionalCart = cartRepository.findById(cartId);
+        Optional<Product> optionalProduct = productRepository.findById(productId);
+
+        if (optionalCart.isPresent() && optionalProduct.isPresent()) {
+            Cart cart = optionalCart.get();
+            List<CartItem> cartItems = cart.getItems();
+
+            Optional<CartItem> optionalCartItem = cartItems.stream()
+                    .filter(item -> item.getProduct().getId().equals(productId))
+                    .findFirst();
+
+            if (optionalCartItem.isPresent()) {
+                CartItem cartItem = optionalCartItem.get();
+                cartItem.setQuantity(cartItem.getQuantity() + quantity);
+                cartRepository.save(cart);
+                return "Item quantity updated";
+            } else {
+                CartItem newCartItem = new CartItem();
+                newCartItem.setProduct(optionalProduct.get());
+                newCartItem.setQuantity(quantity);
+                newCartItem.setCart(cart);
+                cartItems.add(newCartItem);
+                cartRepository.save(cart);
+                return "Item added to cart";
+            }
+        } else {
+            throw new RuntimeException("Invalid Product or Cart ID");
+        }
+    }
+    @Transactional //Exception occurs -> roll back to the initial
+    public void removeCartItem(Long cartId, Long cartItemId) {
+        try {
+            Optional<Cart> savedCart = cartRepository.findById(cartId);
+            Optional<CartItem> savedCartItem = cartItemRepository.findById(cartItemId);
+            if (savedCart.isPresent() && savedCartItem.isPresent()) {
+                List<CartItem> cartItems = savedCart.get().getItems();
+                cartItems.remove(savedCartItem.get());
+
+                cartRepository.save(savedCart.get());
+            }
+
+        } catch (Exception exception) {
+
+            throw new RuntimeException("cart item or cart not found");
+        }
+    }
+    @Transactional
+    public void clearCart(Long cartId) {
+        Optional<Cart> optionalCart = cartRepository.findById(cartId);
+        if (optionalCart.isPresent()) {
+            Cart cart = optionalCart.get();
+            List<CartItem> cartItems = cart.getItems();
+            cartItems.clear();
+            cartRepository.save(cart);
+        }
+    }
+
+    public Cart getCart(int userId) {
+        return cartRepository.findByUserId(userId)
+                .orElseGet(() -> createCart(userId));
+    }
+
+    @Transactional
+    public String updateCartItemQuantity(Long cartId, Long itemId, int quantity) {
+        Optional<Cart> optionalCart = cartRepository.findById(cartId);
+        Optional<CartItem> optionalCartItem = cartItemRepository.findById(itemId);
+
+        if (optionalCart.isPresent() && optionalCartItem.isPresent()) {
+            Cart cart = optionalCart.get();
+            CartItem cartItem = optionalCartItem.get();
+
+            if (!cart.getItems().contains(cartItem)) {
+                throw new RuntimeException("Cart item does not belong to the specified cart");
+            }
+
+            if (quantity <= 0) {
+                cart.getItems().remove(cartItem);
+                cartRepository.save(cart);
+                cartItemRepository.delete(cartItem);
+                return "Cart item removed due to invalid quantity";
+            }
+
+            cartItem.setQuantity(quantity);
+            cartItemRepository.save(cartItem);
+            return "Cart item quantity updated successfully";
+        } else {
+            throw new RuntimeException("Invalid Cart ID or CartItem ID");
+        }
+    }
+
+    public Cart getDefaultCartForUser(int userId) {
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new RuntimeException("User not found"));
+        Long defaultCartId = user.getCartIdDefault();
+
+        if (defaultCartId == null) {
+            throw new RuntimeException("Default cart not found for user");
+        }
+
+        return cartRepository.findById(defaultCartId)
+                .orElseThrow(() -> new RuntimeException("Cart not found"));
+    }
+
+
+
+}
